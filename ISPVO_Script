# ISPVO script

This is a *cheat sheet* consisting of all command lines used during practice.

## Docker  

Checking Docker version:
```console
$ docker version
```
Running Docker for the fisrt time:
```console
$ docker run hello-world
```
List of all containers:
```console
$ docker ps
```
Restarting Docker:
```console
sudo systemctl restart docker
```
Running Apache HTTPD server:

```console
$ docker run httpd
```  
```console
$ ip addr
```
Connecting to the Apache HTTPD server through a Docker container:

```console
$ curl 172.17.0.2
```

```console
$ curl -v 172.17.0.2
```

Recieving JSON:

```console
$ curl -H 'Accept: application/json' https://apps.group.miletic.net/ip/ | jq 
```  
Connecting to a URL using CURL:

```console
$ curl -H https://apps.group.miletic.net/
```  
Starting an Apache HTTPD server using ApacheBench:
```console
$ docker run httpd ab
```

```console
$ docker run httpd ab http://172.17.0.2/
```

##### List of all current containers:
```console
$ docker container list 
```  
##### List of all images:
```console
$ docker image list
``` 

10000 requests with 50 cuncurrent users:
```console
$ docker run httpd ab -n 10000 -c 50 http://172.17.0.2/
``` 
- ab: ApacheBench,
- -n: number of requests,
- -c: number of concurrent users.  

> Run ```console docker run httpd ab``` to see all available ApacheBench parameters..  

## MongoDB

Running MongoDB through a Docker container:

```console
$ docker run mongo
```
Running Mongo bash inside a Docker container:

```console
$ docker run -it mongo bash
```

Once inside Mongo bash:

```console
$ ps aux
```

```console
$ mongosh
```

Running a new command inside a Docker container and starting MongoDB:

```console
$ docker container exec [containerName] mongosh
```
Running a new command inside a Docker container and starting MongoDB (MongoDB stays open):

```console
$ docker container exec -i #containerName mongosh  
```

We have now successfully entered MongoDB. From here, we can create a new dastabase, table etc.

#### Managing the database

Show all databases:

```console
$ show dbs
```
Creating a new database and entering values:

```console
$ db.korisnici.insert({ime: "Ivan Matejčić", god: 22})
```
Show all values:
```console
$ db.korisnici.find()
```
## Playing with networks in Docker
Managing networks in Docker:
```console
$ docker network
```
Listing all available networks:
```console
$ docker network ls
```
Inspecting a particular network within the list:
```console
$ docker network inspect host
```
> Outputs a JSON object with all network information (as well as all containers connected to that network).

Transferring a docker into a different network:

```console
$ docker network 
```

### Task 1:
>Create a new Docker network. Disconnect an existing Docker container from a network and connect it to the newly created network.

 Creating a new docker network:
 ```console
$ docker network create NEW_NETWORK_NAME
```
Disconnecting a docker container from a network:
```console
$ docker network disconnect OLD_NETWORK_NAME CONTAINER_NAME 
```
Connect said container to our new network:
```console
$ docker network connect NEW_NETWORK_NAME CONTAINER_NAME
```
### Task 2:
>Make it so that the new network is using the subnet ```172.31.0.0/16```.  

By default, in Docker network the subnet is ```172.18.0.0/16```. If we want/need to change it, we need to specify it when creating a new network:
```console
$ docker network create NEW_NETWORK_NAME --subnet=NEW_SUBNET
```
Then we can connect a Docker container to this network the same as previously mentioned.

If we want to specify the network we want to connect a new Docker container to, we do it like so:  
```console
$ docker run --network=NETWORK_NAME httpd
```
### Task 3:  
>Run  ```curl``` inside a Docker container and connect it with our newly created network. Use it to get the data from the Apache server connected to the same network.  
Also, try it in a situation where the Apache server isn't connected to the same network.

```console
$ docker run curlimages/curl:7.85.0 curl --help
```
```console
$ docker run curlimages/curl:7.85.0 --help
```
```console
$ docker run curlimages/curl:7.85.0 curl https://example.group.miletic.net/
```
```console
$ docker run curlimages/curl:7.85.0 -v curl 172.31.0.0
```
```console
$ docker run curlimages/curl:7.85.0 -v httpd 172.31.0.0
```

#### Task conslusion:  
We can't access the Apache server (HTTPD) if it isn't on the same network as the Docker container.
